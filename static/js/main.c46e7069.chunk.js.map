{"version":3,"sources":["components/landingpage.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","useState","title","qty","assignee","roles","setRoles","players","setPlayer","className","map","role","i","e","onClick","onChange","target","value","k","length","playersArr","split","Math","floor","random","num","newRandom","push","splice","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAwHeA,MArHf,WAAuB,IAAD,EACOC,mBAAS,CAC/B,CACIC,MAAO,iBACPC,IAAK,EACLC,SAAU,IAEd,CACKF,MAAO,0BACPC,IAAK,EACLC,SAAU,IAEd,CACIF,MAAO,gBACPC,IAAK,EACLC,SAAU,IAEd,CACIF,MAAO,mBACPC,IAAK,EACLC,SAAU,IAEd,CACIF,MAAO,cACPC,IAAK,EACLC,SAAU,IAEd,CACIF,MAAO,4BACPC,IAAK,EACLC,SAAU,IAEd,CACIF,MAAO,mBACPC,IAAK,EACLC,SAAU,IAEd,CACIF,MAAO,iBACPC,IAAK,EACLC,SAAU,MAxCA,mBACXC,EADW,KACLC,EADK,OA4CUL,mBAAS,IA5CnB,mBA4CXM,EA5CW,KA4CHC,EA5CG,KAkFlB,OACI,wDAEI,yBAAKC,UAAU,aACVJ,EAAMK,KAAI,SAACC,EAAKC,GACb,OACA,yBAAKH,UAAU,QACX,yBAAKA,UAAU,SAASE,EAAKT,OADjC,IAC8C,6BAEzCS,EAAKP,SAASM,KAAI,SAAAG,GACf,OACI,6BACCA,MAKT,yBAAKJ,UAAU,iBACX,4BAAQK,QAAS,WAjD3B,IAASD,EAChBR,EADgBQ,EAiD6BD,GAhDpCT,KAAM,IAGdE,EAAMQ,GAAGV,KAAM,EACfG,EAAS,YAAID,OA4CG,KACCM,EAAKR,IACN,4BAAQW,QAAS,WAvDvCT,EAuDgDO,GAvDvCT,KAAO,EAChBG,EAAS,YAAID,MAsDS,WAMhB,yBAAKI,UAAU,QAAf,qCAEI,2BAAOM,SAAU,SAACF,GAAD,OAAKL,EAAUK,EAAEG,OAAOC,WAE7C,4BAAQH,QAlDA,WACZ,IAAI,IAAII,EAAI,EAAGA,EAAIb,EAAMc,OAAQD,IAC7Bb,EAAMa,GAAGd,SAAW,GAIxB,IAFA,IAAIgB,EAAab,EAAQc,MAAM,KAC3BT,EAAI,EACFQ,EAAWD,OAAS,GAAKP,EAAIP,EAAMc,QAAQ,CAChCG,KAAKC,MAAMD,KAAKE,SAASJ,EAAWD,QAEjD,IAFA,IACIM,EAAMpB,EAAMO,GAAGT,IACbsB,EAAM,GAAE,CACV,IAAIC,EAAYJ,KAAKC,MAAMD,KAAKE,SAASJ,EAAWD,QACpDd,EAAMO,GAAGR,SAASuB,KAAKP,EAAWM,IAClCN,EAAWQ,OAAOF,EAAU,GAC5BG,QAAQC,IAAIzB,EAAMO,IAClBa,IAEJb,IAEJN,EAAS,YAAID,MAgCT,cCxGG0B,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCMcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.c46e7069.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './landingpage.css'\r\n\r\nfunction LandingPage(){\r\n    const [roles,setRoles] = useState([\r\n       {\r\n           title: 'Sói Trùm',\r\n           qty: 1,\r\n           assignee: []\r\n       },\r\n       {\r\n            title: 'Sói Thường',\r\n            qty: 1,\r\n            assignee: []\r\n        },\r\n        {\r\n            title: 'Bán Sói',\r\n            qty: 1,\r\n            assignee: []\r\n            },\r\n        {\r\n            title: 'Phù Thủy',\r\n            qty: 1,\r\n            assignee: []\r\n        },\r\n        {\r\n            title: 'Tiên Tri',\r\n            qty: 1,\r\n            assignee: []\r\n            },\r\n        {\r\n            title: 'Cổ Hoặc Sư',\r\n            qty: 1,\r\n            assignee: []\r\n        },\r\n        {\r\n            title: 'Bảo Vệ',\r\n            qty: 1,\r\n            assignee: []\r\n        },\r\n        {\r\n            title: 'Dân Làng',\r\n            qty: 1,\r\n            assignee: []\r\n            },\r\n    ])\r\n\r\n    const [players,setPlayer] = useState('')\r\n\r\n    const add = function(e){\r\n      roles[e].qty += 1\r\n      setRoles([...roles])\r\n    }\r\n\r\n    const minus = function(e){\r\n        if(roles[e].qty <=1){\r\n            return\r\n        } else{\r\n            roles[e].qty -=1;\r\n            setRoles([...roles])\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    const getRole = ()=>{\r\n        for(let k = 0; k < roles.length; k++){\r\n            roles[k].assignee = []\r\n        }\r\n        let playersArr = players.split(',')\r\n        let i = 0\r\n        while(playersArr.length > 0 && i < roles.length ){\r\n            let random = Math.floor(Math.random()*playersArr.length)\r\n            let num = roles[i].qty;\r\n            while(num > 0){\r\n                let newRandom = Math.floor(Math.random()*playersArr.length)\r\n                roles[i].assignee.push(playersArr[newRandom])\r\n                playersArr.splice(newRandom,1)\r\n                console.log(roles[i])\r\n                num--\r\n            }\r\n            i++;\r\n        }\r\n        setRoles([...roles])\r\n    }\r\n    return(\r\n        <div>\r\n            Welcome To Ma Sói !!!\r\n            <div className='container'>\r\n                {roles.map((role,i) =>{\r\n                    return(\r\n                    <div className='card'>\r\n                        <div className='title'>{role.title}</div> <br/>\r\n                        \r\n                        {role.assignee.map(e =>{\r\n                            return(\r\n                                <div>\r\n                                {e}\r\n                                </div>\r\n                                \r\n                            )\r\n                        })}\r\n                        <div className='btn-container'>\r\n                            <button onClick={()=>{minus(i)}}>-</button>\r\n                            {role.qty}\r\n                            <button onClick={()=>{add(i)}}>+</button>\r\n                        </div>\r\n                    </div>)\r\n                })}\r\n            </div>\r\n            \r\n            <div className='form'>\r\n                Tên Người Chơi : \r\n                <input onChange={(e)=>setPlayer(e.target.value)}></input> \r\n            </div>\r\n            <button onClick={getRole}>Get Role</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage;","import React from 'react';\nimport LandingPage from './components/landingpage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LandingPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}